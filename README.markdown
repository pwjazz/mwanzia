# Mwanzia Overview

Mwanzia provides a mechanism for seamless remote binding from JavaScript to
server-side Java objects via an HTTP transport. Mwanzia keeps the semantics on
the client as similar as possible to the server-side, and in general aims to
make programming on the client feel like you're programming on the server.

Unlike [GWT](http://code.google.com/webtoolkit/), Mwanzia is not a UI framework.
Consequently, the server-side Java code does not need to contain any UI-related
logic or configuration. This makes Mwanzia suitable for binding directly from a
JavaScript UI to a domain model without needing to create any server-side
UI components.

## Example

### Java Code

    package org.mwanzia.demo;
        
    /**
     * Part of the object model in our example system.
     */
    public class Account {
        private Long id;
        private String name;
        private Date closedDate;
        
        /**
         * The @Remote annotation indicates that this method is callable
         * from JavaScript.
         */
        @Remote
        public static List<Account> list() {
           // query for your accounts as necessary
        }
        
        @Remote
        public Account close() {
           this.closedDate = new Date();
           // persist, audit log, whatever else you need to do
           return this;
        }

        // this annotation means that the ID will be transferred from client
        // to server when making calls to a specific instance of the Account        
        @Transferable 
        public Long getId() {
            return id;
        }
        
        public void setId(Long id) {
            this.id = id;
        }
    } 
    
### JavaScript Code
   
    // Import top level package names so that you can use them (e.g. org.mwanzia.demo)
    
    mwanziaImport();            
                
    // Import the org.mwanzia.demo package so that we can reference Account
    // directly, instead of using org.mwanzia.demo.Account
    
    mwanziaImportPackage(org.mwanzia.demo);
    
    var anAccount = null;
    
    Account.list().success(function(accountList) {
        
        // Get the third account
        anAccount = accountList[3];
        
        anAccount.close(function(updatedAccount) {
           // Update the local account
           anAccount = updatedAccount;
        }).go();
    }.go();
    
That's it - no messing with XHR objects, URLs, query parameters, ids or any of
the usual boilerplate!

## Wait a minute, where's the plumbing?!

Okay, we cheated a little bit in our example, you do also have to set up some
plumbing to get this all to work, but it's pretty minimal. You'll need to:

1. Create an Application class and register your remote objects
2. Configure the Mwanzia Servlet in your web.xml
3. Import some JavaScript on the client

### Application Class

In order to use Mwanzia, you create a sub-class of org.mwanzia.Application.
Inside the constructor, you register classes for remote access using the
method registerRemote().

    package org.mwanzia.demo;
    
    public class DemoApplication extends org.mwanzia.Application {
        public DemoApplication() {
            super();
            // Register Account as a remoteable class in this Application
            registerRemote(Account.class);
        }
    }

### web.xml

    <servlet>
        <servlet-name>Mwanzia</servlet-name>
        <servlet-class>org.mwanzia.MwanziaServlet</servlet-class>
        <init-param>
            <!-- TODO - add support for multiple applications -->
            <param-name>application</param-name>
            <param-value>org.mwanzia.test.TestApplication</param-value>
        </init-param>
        <load-on-startup />
    </servlet>

    <servlet-mapping>
        <servlet-name>Mwanzia</servlet-name>
        <url-pattern>/server.js</url-pattern>
    </servlet-mapping>

### Script Imports

Mwanzia has a number of JavaScript dependencies.

    <!-- Required JavaScript Libraries -->
    <script type="text/javascript" src="/js/console.js"></script>
    <script type="text/javascript" src="/js/jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="/js/json2.js"></script>
    <script type="text/javascript" src="/js/typesystem.js"></script>
    <script type="text/javascript" src="/js/mwanzia.core.js"></script>
    <!-- JPA Plugin (Optional) -->
    <script type="text/javascript" src="/js/mwanzia.jpa.js"></script>
    <!-- Validation Plugin (Optional) -->
    <script type="text/javascript" src="/js/mwanzia.validation.js"></script>
    <!-- The dynamically created server.js (generated by Mwanzia servlet) -->
    <script type="text/javascript" src="/server.js"></script>
    
+ *console.js* - Mwanzia logs trace and error information to the console.
                 Include console.js to provide compatibility with browsers that
                 don't have a console of their own.
                 
+ *jquery-1.4.2.min.js* - Mwanzia uses jQuery's ajax support.  Feel free to use
                           your own version of jQuery.
                           
+ *json2.js* - Mwanzia uses this library for parsing and serialization JSON
               instead of the browser's built-in JSON parser.
               
+ *typesystem.js* - Mwanzia uses a type system based on this
                    [John Resig Article](http://ejohn.org/blog/simple-javascript-inheritance/).
                    This type system allows the JavaScript versions of your
                    server-side objects to follow the same inheritance hierarchy
                    as their Java counterparts.
                    
+ *mwanzia.core.js* - The Mwanzia core client-side API.

+ *mwanzia.jpa.js* - (Optional) Client-side support for Mwanzia's JPA plugin.

+ *mwanzia.validation.js* - (Optional) Client-side support for Mwanzia's
                            validation plugin.                      

+ *server.js* - This is where the magic happens.  server.js is dynamically
                generated by the MwanziaServlet and sets up your client-side
                object model for all remotely accessible server-side classes.
    
### What Goes On Under the Covers

![Example Sequence Diagram](https://github.com/pwjazz/mwanzia/raw/master/docs/img/example_sequence_diagram.png)

1. When you include server.js on your page, it imports dynamically created
   JavaScript that defines the client-side version of your object model.  A look
   at this file will explain much about the magic that happens on the client-side.

2. When you call a remote method like list() in the browser, the JavaScript
   object dispatches this to the server via the MwanziaServlet.  In the case of
   a static method like list(), MwanziaServlet simply invokes the static method
   on the server and then returns the result to the client.
   
3. In addition to calling static methods, you may also call instance methods
   like close(). When you do this, MwanziaServlet will first instantiate an
   instance of the appropriate type, and then set all properties marked as
   @Transferable (in this case, the property "id").  Then it calls the method.
   
### Security

Mwanzia takes various steps to prevent JavaScript clients from gaining access
to functionality and data that they ought not to.

#### Method Whitelisting

Only methods marked as @Remote are accessible from the client.

#### Property White- or Blacklisting

Your Mwanzia Application can use either whitelisting or blacklisting to
restrict client-side access to properties on your Java beans.  The default mode
is whitelisting.

+ *@JsonProperty* - add this to the getter method to whitelist the property

+ *@JsonIgnore* - add this to the getter method to blacklist the property

#### JPA Pass-by-Reference

When using the JPA Plugin, all non-primitive method parameters are passed
by reference unless marked with @ByValue.  This prevents the client from passing
in a persistent entity and inadvertently or maliciously modifying that
persistent entity.

#### Apache Shiro Plugin

Mwanzia includes a plugin that supports authentication and method-level
authorization using [Apache Shiro](http://shiro.apache.org/).

### Core Features

#### Exception Handling

### Plugins

In order to support the use of Mwanzia in a variety of contexts, the core of
Mwanzia is extremely slim on features and focuses purely on remoting from
JavaScript to Java.  Mwanzia can be extended through the use of plugins, and
it includes a few plugins to support common usage patterns.

### JPA Support

Mwanzia is particularly well suited to binding from JavaScript to a persistent
server-side domain model.  In fact, this is the scenario for which Mwanzia
was originally authored.  The JPA plugin (currently implemented for Hibernate)
supports this pattern.

The JPA plugin provides several key features:

#### Managing Object Identity

Persistent entities are treated as references that are identified by a single
property named "id".  When a remote method is called on a persistent entity,
Mwanzia first loads that entity from the database and then invokes the method
on that peristent entity.

#### Pass by Reference

When calling a remote method that accepts a persistent entity as a parameter,
Mwanzia will by default pass that entity from the client by reference.  This
means that the entity is identified by its "id" property and the parameter
is loaded from the database before being passed to the method.

For example:

    public class Customer {
        @Id
        private Long id;
    }

    public class Account {
        @Id
        private Long id;
        
        private Set<Customer> customers = new HashSet<Customer>();
        
        public Account linkToCustomer(Customer customer) {
            this.customers.add(customer);
            return this;
        }
    }
    
On client:

    var customer = // get the customer from somewhere;
    var account = // get the account from somewhere
    
    account.linkToCustomer(customer, function(updatedAccount) {
        // handle the updatedAccount
    }).go();
    
In this example, when linkToCustomer is called, Mwanzia will look up the
Account by its id, look up the Customer by its id, and then pass that Customer
to that Account's linkToCustomer() method.

Since we're just passing the Customer by id, it's perfectly ok to just pass an
id on the client-side, like so:

    account.linkToCustomer(5, function(updatedAccount) {
        // handle the updatedAccount
    }).go();

#### Automatic Remote Registration

All persistent types are automatically exported to the client and eligible for
remote access.  Individual methods still need to be marked as @Remote to allow
remote invocation.