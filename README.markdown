# Mwanzia Overview

Mwanzia provides a mechanism for seamless remote binding from JavaScript to
server-side Java objects via an HTTP transport. Mwanzia keeps the semantics on
the client as similar as possible to the server-side, and in general aims to
make programming on the client feel like you're programming on the server.

Unlike [GWT](http://code.google.com/webtoolkit/), Mwanzia is not a UI framework.
Consequently, the server-side Java code does not need to contain any UI-related
logic or configuration. This makes Mwanzia suitable for binding directly from a
JavaScript UI to a domain model without needing to create any server-side
UI components.

## Example

### Java Code

    package org.mwanzia.demo;
        
    /**
     * Part of the object model in our example system.
     */
    public class Account {
        private Long id;
        private String name;
        private Date closedDate;
        
        /**
         * The @Remote annotation indicates that this method is callable
         * from JavaScript.
         */
        @Remote
        public static List<Account> list() {
           // query for your accounts as necessary
        }
        
        @Remote
        public Account close() {
           this.closedDate = new Date();
           // persist, audit log, whatever else you need to do
           return this;
        }
        
        public Long getId() {
            return id;
        }
        
        public void setId(Long id) {
            this.id = id;
        }
    } 
    
### JavaScript Code
   
    // Import top level package names so that you can use them (e.g. org.mwanzia.demo)
    
    mwanziaImport();            
                
    // Import the org.mwanzia.demo package so that we can reference Account
    // directly, instead of using org.mwanzia.demo.Account
    
    mwanziaImportPackage(org.mwanzia.demo);
    
    var anAccount = null;
    
    Account.list().success(function(accountList) {
        
        // Get the third account
        anAccount = accountList[3];
        
        anAccount.close(function(updatedAccount) {
           // Update the local account
           anAccount = updatedAccount;
        }).go();
    }.go();
    
That's it - no messing with XHR objects, URLs, query parameters, ids or any of
the usual boilerplate!

## Wait a minute, where's the plumbing?!

Okay, we cheated a little bit in our example, you do also have to set up some
plumbing to get this all to work, but it's pretty minimal. You'll need to:

1. Create an Application class and register your remote objects
2. Configure the Mwanzia Servlet in your web.xml
3. Import some JavaScript on the client

### Application Class

In order to use Mwanzia, you create a sub-class of org.mwanzia.Application.
Inside the constructor, you register classes for remote access using the
method registerRemote().

    package org.mwanzia.demo;
    
    public class DemoApplication extends org.mwanzia.Application {
        public DemoApplication() {
            super();
            // Register Account as a remoteable class in this Application
            registerRemote(Account.class);
        }
    }

### web.xml

    <servlet>
        <servlet-name>Mwanzia</servlet-name>
        <servlet-class>org.mwanzia.MwanziaServlet</servlet-class>
        <init-param>
            <!-- TODO - add support for multiple applications -->
            <param-name>application</param-name>
            <param-value>org.mwanzia.test.TestApplication</param-value>
        </init-param>
        <load-on-startup />
    </servlet>

    <servlet-mapping>
        <servlet-name>Mwanzia</servlet-name>
        <url-pattern>/server.js</url-pattern>
    </servlet-mapping>

### Script Imports

Mwanzia has a number of JavaScript dependencies.

    <!-- Required JavaScript Libraries -->
    <script type="text/javascript" src="/js/console.js"></script>
    <script type="text/javascript" src="/js/jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="/js/json2.js"></script>
    <script type="text/javascript" src="/js/typesystem.js"></script>
    <script type="text/javascript" src="/js/date.format.js"></script>
    <script type="text/javascript" src="/js/mwanzia.core.js"></script>
    <!-- JPA Plugin (Optional) -->
    <script type="text/javascript" src="/js/mwanzia.jpa.js"></script>
    <!-- Validation Plugin (Optional) -->
    <script type="text/javascript" src="/js/mwanzia.validation.js"></script>
    <!-- The dynamically created server.js (generated by Mwanzia servlet) -->
    <script type="text/javascript" src="/server.js"></script>
    
+ *console.js* - Mwanzia logs trace and error information to the console.
                 Include console.js to provide compatibility with browsers that
                 don't have a console of their own.
                 
+ *jquery-1.4.2.min.js * - Mwanzia uses jQuery's ajax support.  Feel free to use
                           your own version of jQuery.
                           
                                         
    
### What Goes On Under the Covers

![Example Sequence Diagram](https://github.com/pwjazz/mwanzia/raw/master/docs/img/example_sequence_diagram.png)

From the client-side, all the magic happens in server.js.

1. When you include server.js on your page, it imports dynamically created
JavaScript that defines the client-side version of your object model.

2. When you call a remote method on your JavaScript object, the Mwanzia AJAX
transport issues a POST request to server.js.  On the server-side, the
MwanziaServlet dispatches this call to the appropriate 
requests to server.js in order to perform remote invocations.

